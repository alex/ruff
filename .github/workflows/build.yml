name: "[ruff] Build"

on:
  workflow_call:
    inputs:
      plan:
        required: true
        type: string
  pull_request:
    paths:
      # When we change pyproject.toml, we want to ensure that the maturin builds still work
      - pyproject.toml
      # And when we change this workflow itself...
      - .github/workflows/build.yaml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ruff
  PYTHON_VERSION: "3.11"
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUSTUP_MAX_RETRIES: 10

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: "Prep README.md"
        run: python scripts/transform_readme.py --target pypi
      - name: "Build sdist"
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: "Test sdist"
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.tar.gz --force-reinstall
          ruff --help
          python -m ruff --help
      - name: "Upload sdist"
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

#  macos-x86_64:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          architecture: x64
#      - name: "Prep README.md"
#        run: python scripts/transform_readme.py --target pypi
#      - name: "Build wheels - x86_64"
#        uses: PyO3/maturin-action@v1
#        with:
#          target: x86_64
#          args: --release --locked --out dist
#      - name: "Test wheel - x86_64"
#        run: |
#          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
#          ruff --help
#          python -m ruff --help
#      - name: "Upload wheels"
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: dist
#      - name: "Archive binary"
#        run: |
#          ARCHIVE_FILE=ruff-x86_64-apple-darwin.tar.gz
#          tar czvf $ARCHIVE_FILE -C target/x86_64-apple-darwin/release ruff
#          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
#      - name: "Upload binary"
#        uses: actions/upload-artifact@v3
#        with:
#          name: artifacts
#          path: |
#            *.tar.gz
#            *.sha256
#
#  macos-universal:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          architecture: x64
#      - name: "Prep README.md"
#        run: python scripts/transform_readme.py --target pypi
#      - name: "Build wheels - universal2"
#        uses: PyO3/maturin-action@v1
#        with:
#          args: --release --locked --target universal2-apple-darwin --out dist
#      - name: "Test wheel - universal2"
#        run: |
#          pip install dist/${{ env.PACKAGE_NAME }}-*universal2.whl --force-reinstall
#          ruff --help
#          python -m ruff --help
#      - name: "Upload wheels"
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: dist
#      - name: "Archive binary"
#        run: |
#          ARCHIVE_FILE=ruff-aarch64-apple-darwin.tar.gz
#          tar czvf $ARCHIVE_FILE -C target/aarch64-apple-darwin/release ruff
#          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
#      - name: "Upload binary"
#        uses: actions/upload-artifact@v3
#        with:
#          name: artifacts
#          path: |
#            *.tar.gz
#            *.sha256
#
#  windows:
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        platform:
#          - target: x86_64-pc-windows-msvc
#            arch: x64
#          - target: i686-pc-windows-msvc
#            arch: x86
#          - target: aarch64-pc-windows-msvc
#            arch: x64
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          architecture: ${{ matrix.platform.arch }}
#      - name: "Prep README.md"
#        run: python scripts/transform_readme.py --target pypi
#      - name: "Build wheels"
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.platform.target }}
#          args: --release --locked --out dist
#      - name: "Test wheel"
#        if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}
#        shell: bash
#        run: |
#          python -m pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
#          ruff --help
#          python -m ruff --help
#      - name: "Upload wheels"
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: dist
#      - name: "Archive binary"
#        shell: bash
#        run: |
#          ARCHIVE_FILE=ruff-${{ matrix.platform.target }}.zip
#          7z a $ARCHIVE_FILE ./target/${{ matrix.platform.target }}/release/ruff.exe
#          sha256sum $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
#      - name: "Upload binary"
#        uses: actions/upload-artifact@v3
#        with:
#          name: artifacts
#          path: |
#            *.zip
#            *.sha256

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
#          - i686-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: "Prep README.md"
        run: python scripts/transform_readme.py --target pypi
      - name: "Build wheels"
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --locked --out dist
      - name: "Test wheel"
        if: ${{ startsWith(matrix.target, 'x86_64') }}
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
          ruff --help
          python -m ruff --help
      - name: "Upload wheels"
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: "Archive binary"
        run: |
          ARCHIVE_FILE=ruff-${{ matrix.target }}.tar.gz
          tar czvf $ARCHIVE_FILE -C target/${{ matrix.target }}/release ruff
          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
      - name: "Upload binary"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            *.tar.gz
            *.sha256

#  linux-cross:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        platform:
#          - target: aarch64-unknown-linux-gnu
#            arch: aarch64
#            # see https://github.com/astral-sh/ruff/issues/3791
#            # and https://github.com/gnzlbg/jemallocator/issues/170#issuecomment-1503228963
#            maturin_docker_options: -e JEMALLOC_SYS_WITH_LG_PAGE=16
#          - target: armv7-unknown-linux-gnueabihf
#            arch: armv7
#          - target: s390x-unknown-linux-gnu
#            arch: s390x
#          - target: powerpc64le-unknown-linux-gnu
#            arch: ppc64le
#          - target: powerpc64-unknown-linux-gnu
#            arch: ppc64
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#      - name: "Prep README.md"
#        run: python scripts/transform_readme.py --target pypi
#      - name: "Build wheels"
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.platform.target }}
#          manylinux: auto
#          docker-options: ${{ matrix.platform.maturin_docker_options }}
#          args: --release --locked --out dist
#      - uses: uraimo/run-on-arch-action@v2
#        if: matrix.platform.arch != 'ppc64'
#        name: Test wheel
#        with:
#          arch: ${{ matrix.platform.arch }}
#          distro: ubuntu20.04
#          githubToken: ${{ github.token }}
#          install: |
#            apt-get update
#            apt-get install -y --no-install-recommends python3 python3-pip
#            pip3 install -U pip
#          run: |
#            pip3 install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall
#            ruff --help
#      - name: "Upload wheels"
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: dist
#      - name: "Archive binary"
#        run: |
#          ARCHIVE_FILE=ruff-${{ matrix.platform.target }}.tar.gz
#          tar czvf $ARCHIVE_FILE -C target/${{ matrix.platform.target }}/release ruff
#          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
#      - name: "Upload binary"
#        uses: actions/upload-artifact@v3
#        with:
#          name: artifacts
#          path: |
#            *.tar.gz
#            *.sha256
#
#  musllinux:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        target:
#          - x86_64-unknown-linux-musl
#          - i686-unknown-linux-musl
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#          architecture: x64
#      - name: "Prep README.md"
#        run: python scripts/transform_readme.py --target pypi
#      - name: "Build wheels"
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.target }}
#          manylinux: musllinux_1_2
#          args: --release --locked --out dist
#      - name: "Test wheel"
#        if: matrix.target == 'x86_64-unknown-linux-musl'
#        uses: addnab/docker-run-action@v3
#        with:
#          image: alpine:latest
#          options: -v ${{ github.workspace }}:/io -w /io
#          run: |
#            apk add python3
#            python -m venv .venv
#            .venv/bin/pip3 install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall
#            .venv/bin/ruff check --help
#      - name: "Upload wheels"
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: dist
#      - name: "Archive binary"
#        run: |
#          ARCHIVE_FILE=ruff-${{ matrix.target }}.tar.gz
#          tar czvf $ARCHIVE_FILE -C target/${{ matrix.target }}/release ruff
#          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
#      - name: "Upload binary"
#        uses: actions/upload-artifact@v3
#        with:
#          name: artifacts
#          path: |
#            *.tar.gz
#            *.sha256
#
#  musllinux-cross:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        platform:
#          - target: aarch64-unknown-linux-musl
#            arch: aarch64
#            maturin_docker_options: -e JEMALLOC_SYS_WITH_LG_PAGE=16
#          - target: armv7-unknown-linux-musleabihf
#            arch: armv7
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#      - name: "Prep README.md"
#        run: python scripts/transform_readme.py --target pypi
#      - name: "Build wheels"
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.platform.target }}
#          manylinux: musllinux_1_2
#          args: --release --locked --out dist
#          docker-options: ${{ matrix.platform.maturin_docker_options }}
#      - uses: uraimo/run-on-arch-action@v2
#        name: Test wheel
#        with:
#          arch: ${{ matrix.platform.arch }}
#          distro: alpine_latest
#          githubToken: ${{ github.token }}
#          install: |
#            apk add python3
#          run: |
#            python -m venv .venv
#            .venv/bin/pip3 install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall
#            .venv/bin/ruff check --help
#      - name: "Upload wheels"
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: dist
#      - name: "Archive binary"
#        run: |
#          ARCHIVE_FILE=ruff-${{ matrix.platform.target }}.tar.gz
#          tar czvf $ARCHIVE_FILE -C target/${{ matrix.platform.target }}/release ruff
#          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
#      - name: "Upload binary"
#        uses: actions/upload-artifact@v3
#        with:
#          name: artifacts
#          path: |
#            *.tar.gz
#            *.sha256
